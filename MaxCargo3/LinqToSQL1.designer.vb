'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="BDMaxCargo")>  _
Partial Public Class LinqToSQL1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCliente(instance As Cliente)
    End Sub
  Partial Private Sub UpdateCliente(instance As Cliente)
    End Sub
  Partial Private Sub DeleteCliente(instance As Cliente)
    End Sub
  Partial Private Sub InsertDocumento(instance As Documento)
    End Sub
  Partial Private Sub UpdateDocumento(instance As Documento)
    End Sub
  Partial Private Sub DeleteDocumento(instance As Documento)
    End Sub
  Partial Private Sub InsertEgreso(instance As Egreso)
    End Sub
  Partial Private Sub UpdateEgreso(instance As Egreso)
    End Sub
  Partial Private Sub DeleteEgreso(instance As Egreso)
    End Sub
  Partial Private Sub InsertIngreso(instance As Ingreso)
    End Sub
  Partial Private Sub UpdateIngreso(instance As Ingreso)
    End Sub
  Partial Private Sub DeleteIngreso(instance As Ingreso)
    End Sub
  Partial Private Sub InsertOtro(instance As Otro)
    End Sub
  Partial Private Sub UpdateOtro(instance As Otro)
    End Sub
  Partial Private Sub DeleteOtro(instance As Otro)
    End Sub
  Partial Private Sub InsertTrabajador(instance As Trabajador)
    End Sub
  Partial Private Sub UpdateTrabajador(instance As Trabajador)
    End Sub
  Partial Private Sub DeleteTrabajador(instance As Trabajador)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  Partial Private Sub InsertVehiculo(instance As Vehiculo)
    End Sub
  Partial Private Sub UpdateVehiculo(instance As Vehiculo)
    End Sub
  Partial Private Sub DeleteVehiculo(instance As Vehiculo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.MaxCargo2.Properties.Settings.Default.BDMaxCargoConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Cliente() As System.Data.Linq.Table(Of Cliente)
		Get
			Return Me.GetTable(Of Cliente)
		End Get
	End Property
	
	Public ReadOnly Property Documento() As System.Data.Linq.Table(Of Documento)
		Get
			Return Me.GetTable(Of Documento)
		End Get
	End Property
	
	Public ReadOnly Property Egreso() As System.Data.Linq.Table(Of Egreso)
		Get
			Return Me.GetTable(Of Egreso)
		End Get
	End Property
	
	Public ReadOnly Property Ingreso() As System.Data.Linq.Table(Of Ingreso)
		Get
			Return Me.GetTable(Of Ingreso)
		End Get
	End Property
	
	Public ReadOnly Property Otro() As System.Data.Linq.Table(Of Otro)
		Get
			Return Me.GetTable(Of Otro)
		End Get
	End Property
	
	Public ReadOnly Property Trabajador() As System.Data.Linq.Table(Of Trabajador)
		Get
			Return Me.GetTable(Of Trabajador)
		End Get
	End Property
	
	Public ReadOnly Property Usuario() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	Public ReadOnly Property Vehiculo() As System.Data.Linq.Table(Of Vehiculo)
		Get
			Return Me.GetTable(Of Vehiculo)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cliente")>  _
Partial Public Class Cliente
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCliente As Integer
	
	Private _Direccion As String
	
	Private _Nombre As String
	
	Private _Razon As String
	
	Private _RUC As String
	
	Private _IdDocu As System.Nullable(Of Integer)
	
	Private _Ingreso As EntitySet(Of Ingreso)
	
	Private _Usuario As EntitySet(Of Usuario)
	
	Private _Documento As EntityRef(Of Documento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdClienteChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnRazonChanging(value As String)
    End Sub
    Partial Private Sub OnRazonChanged()
    End Sub
    Partial Private Sub OnRUCChanging(value As String)
    End Sub
    Partial Private Sub OnRUCChanged()
    End Sub
    Partial Private Sub OnIdDocuChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDocuChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ingreso = New EntitySet(Of Ingreso)(AddressOf Me.attach_Ingreso, AddressOf Me.detach_Ingreso)
		Me._Usuario = New EntitySet(Of Usuario)(AddressOf Me.attach_Usuario, AddressOf Me.detach_Usuario)
		Me._Documento = CType(Nothing, EntityRef(Of Documento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCliente", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdCliente() As Integer
		Get
			Return Me._IdCliente
		End Get
		Set
			If ((Me._IdCliente = value)  _
						= false) Then
				Me.OnIdClienteChanging(value)
				Me.SendPropertyChanging
				Me._IdCliente = value
				Me.SendPropertyChanged("IdCliente")
				Me.OnIdClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="VarChar(100)")>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Razon", DbType:="VarChar(100)")>  _
	Public Property Razon() As String
		Get
			Return Me._Razon
		End Get
		Set
			If (String.Equals(Me._Razon, value) = false) Then
				Me.OnRazonChanging(value)
				Me.SendPropertyChanging
				Me._Razon = value
				Me.SendPropertyChanged("Razon")
				Me.OnRazonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RUC", DbType:="VarChar(100)")>  _
	Public Property RUC() As String
		Get
			Return Me._RUC
		End Get
		Set
			If (String.Equals(Me._RUC, value) = false) Then
				Me.OnRUCChanging(value)
				Me.SendPropertyChanging
				Me._RUC = value
				Me.SendPropertyChanged("RUC")
				Me.OnRUCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDocu", DbType:="Int")>  _
	Public Property IdDocu() As System.Nullable(Of Integer)
		Get
			Return Me._IdDocu
		End Get
		Set
			If (Me._IdDocu.Equals(value) = false) Then
				If Me._Documento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDocuChanging(value)
				Me.SendPropertyChanging
				Me._IdDocu = value
				Me.SendPropertyChanged("IdDocu")
				Me.OnIdDocuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Ingreso", Storage:="_Ingreso", ThisKey:="IdCliente", OtherKey:="IdCliente")>  _
	Public Property Ingreso() As EntitySet(Of Ingreso)
		Get
			Return Me._Ingreso
		End Get
		Set
			Me._Ingreso.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Usuario", Storage:="_Usuario", ThisKey:="IdCliente", OtherKey:="IdCliente")>  _
	Public Property Usuario() As EntitySet(Of Usuario)
		Get
			Return Me._Usuario
		End Get
		Set
			Me._Usuario.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Documento_Cliente", Storage:="_Documento", ThisKey:="IdDocu", OtherKey:="IdDocu", IsForeignKey:=true)>  _
	Public Property Documento() As Documento
		Get
			Return Me._Documento.Entity
		End Get
		Set
			Dim previousValue As Documento = Me._Documento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documento.Entity = Nothing
					previousValue.Cliente.Remove(Me)
				End If
				Me._Documento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cliente.Add(Me)
					Me._IdDocu = value.IdDocu
				Else
					Me._IdDocu = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Documento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ingreso(ByVal entity As Ingreso)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Ingreso(ByVal entity As Ingreso)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
	
	Private Sub attach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Cliente = Me
	End Sub
	
	Private Sub detach_Usuario(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.Cliente = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Documento")>  _
Partial Public Class Documento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdDocu As Integer
	
	Private _TipoDoc As String
	
	Private _NroDoc As String
	
	Private _Cliente As EntitySet(Of Cliente)
	
	Private _Egreso As EntitySet(Of Egreso)
	
	Private _Ingreso As EntitySet(Of Ingreso)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdDocuChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDocuChanged()
    End Sub
    Partial Private Sub OnTipoDocChanging(value As String)
    End Sub
    Partial Private Sub OnTipoDocChanged()
    End Sub
    Partial Private Sub OnNroDocChanging(value As String)
    End Sub
    Partial Private Sub OnNroDocChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = New EntitySet(Of Cliente)(AddressOf Me.attach_Cliente, AddressOf Me.detach_Cliente)
		Me._Egreso = New EntitySet(Of Egreso)(AddressOf Me.attach_Egreso, AddressOf Me.detach_Egreso)
		Me._Ingreso = New EntitySet(Of Ingreso)(AddressOf Me.attach_Ingreso, AddressOf Me.detach_Ingreso)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDocu", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdDocu() As Integer
		Get
			Return Me._IdDocu
		End Get
		Set
			If ((Me._IdDocu = value)  _
						= false) Then
				Me.OnIdDocuChanging(value)
				Me.SendPropertyChanging
				Me._IdDocu = value
				Me.SendPropertyChanged("IdDocu")
				Me.OnIdDocuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoDoc", DbType:="VarChar(100)")>  _
	Public Property TipoDoc() As String
		Get
			Return Me._TipoDoc
		End Get
		Set
			If (String.Equals(Me._TipoDoc, value) = false) Then
				Me.OnTipoDocChanging(value)
				Me.SendPropertyChanging
				Me._TipoDoc = value
				Me.SendPropertyChanged("TipoDoc")
				Me.OnTipoDocChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NroDoc", DbType:="VarChar(100)")>  _
	Public Property NroDoc() As String
		Get
			Return Me._NroDoc
		End Get
		Set
			If (String.Equals(Me._NroDoc, value) = false) Then
				Me.OnNroDocChanging(value)
				Me.SendPropertyChanging
				Me._NroDoc = value
				Me.SendPropertyChanged("NroDoc")
				Me.OnNroDocChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Documento_Cliente", Storage:="_Cliente", ThisKey:="IdDocu", OtherKey:="IdDocu")>  _
	Public Property Cliente() As EntitySet(Of Cliente)
		Get
			Return Me._Cliente
		End Get
		Set
			Me._Cliente.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Documento_Egreso", Storage:="_Egreso", ThisKey:="IdDocu", OtherKey:="IdDocu")>  _
	Public Property Egreso() As EntitySet(Of Egreso)
		Get
			Return Me._Egreso
		End Get
		Set
			Me._Egreso.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Documento_Ingreso", Storage:="_Ingreso", ThisKey:="IdDocu", OtherKey:="IdDocu")>  _
	Public Property Ingreso() As EntitySet(Of Ingreso)
		Get
			Return Me._Ingreso
		End Get
		Set
			Me._Ingreso.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Documento = Me
	End Sub
	
	Private Sub detach_Cliente(ByVal entity As Cliente)
		Me.SendPropertyChanging
		entity.Documento = Nothing
	End Sub
	
	Private Sub attach_Egreso(ByVal entity As Egreso)
		Me.SendPropertyChanging
		entity.Documento = Me
	End Sub
	
	Private Sub detach_Egreso(ByVal entity As Egreso)
		Me.SendPropertyChanging
		entity.Documento = Nothing
	End Sub
	
	Private Sub attach_Ingreso(ByVal entity As Ingreso)
		Me.SendPropertyChanging
		entity.Documento = Me
	End Sub
	
	Private Sub detach_Ingreso(ByVal entity As Ingreso)
		Me.SendPropertyChanging
		entity.Documento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Egreso")>  _
Partial Public Class Egreso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEgre As Integer
	
	Private _MontoEgre As System.Nullable(Of Integer)
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _TipoEgre As System.Nullable(Of Integer)
	
	Private _IdDocu As System.Nullable(Of Integer)
	
	Private _Otro As EntitySet(Of Otro)
	
	Private _Trabajador As EntitySet(Of Trabajador)
	
	Private _Vehiculo As EntitySet(Of Vehiculo)
	
	Private _Documento As EntityRef(Of Documento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEgreChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEgreChanged()
    End Sub
    Partial Private Sub OnMontoEgreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMontoEgreChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnTipoEgreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTipoEgreChanged()
    End Sub
    Partial Private Sub OnIdDocuChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDocuChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Otro = New EntitySet(Of Otro)(AddressOf Me.attach_Otro, AddressOf Me.detach_Otro)
		Me._Trabajador = New EntitySet(Of Trabajador)(AddressOf Me.attach_Trabajador, AddressOf Me.detach_Trabajador)
		Me._Vehiculo = New EntitySet(Of Vehiculo)(AddressOf Me.attach_Vehiculo, AddressOf Me.detach_Vehiculo)
		Me._Documento = CType(Nothing, EntityRef(Of Documento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEgre", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEgre() As Integer
		Get
			Return Me._IdEgre
		End Get
		Set
			If ((Me._IdEgre = value)  _
						= false) Then
				Me.OnIdEgreChanging(value)
				Me.SendPropertyChanging
				Me._IdEgre = value
				Me.SendPropertyChanged("IdEgre")
				Me.OnIdEgreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MontoEgre", DbType:="Int")>  _
	Public Property MontoEgre() As System.Nullable(Of Integer)
		Get
			Return Me._MontoEgre
		End Get
		Set
			If (Me._MontoEgre.Equals(value) = false) Then
				Me.OnMontoEgreChanging(value)
				Me.SendPropertyChanging
				Me._MontoEgre = value
				Me.SendPropertyChanged("MontoEgre")
				Me.OnMontoEgreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoEgre", DbType:="Int")>  _
	Public Property TipoEgre() As System.Nullable(Of Integer)
		Get
			Return Me._TipoEgre
		End Get
		Set
			If (Me._TipoEgre.Equals(value) = false) Then
				Me.OnTipoEgreChanging(value)
				Me.SendPropertyChanging
				Me._TipoEgre = value
				Me.SendPropertyChanged("TipoEgre")
				Me.OnTipoEgreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDocu", DbType:="Int")>  _
	Public Property IdDocu() As System.Nullable(Of Integer)
		Get
			Return Me._IdDocu
		End Get
		Set
			If (Me._IdDocu.Equals(value) = false) Then
				If Me._Documento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDocuChanging(value)
				Me.SendPropertyChanging
				Me._IdDocu = value
				Me.SendPropertyChanged("IdDocu")
				Me.OnIdDocuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Egreso_Otro", Storage:="_Otro", ThisKey:="IdEgre", OtherKey:="IdEgre")>  _
	Public Property Otro() As EntitySet(Of Otro)
		Get
			Return Me._Otro
		End Get
		Set
			Me._Otro.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Egreso_Trabajador", Storage:="_Trabajador", ThisKey:="IdEgre", OtherKey:="IdEgre")>  _
	Public Property Trabajador() As EntitySet(Of Trabajador)
		Get
			Return Me._Trabajador
		End Get
		Set
			Me._Trabajador.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Egreso_Vehiculo", Storage:="_Vehiculo", ThisKey:="IdEgre", OtherKey:="IdEgre")>  _
	Public Property Vehiculo() As EntitySet(Of Vehiculo)
		Get
			Return Me._Vehiculo
		End Get
		Set
			Me._Vehiculo.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Documento_Egreso", Storage:="_Documento", ThisKey:="IdDocu", OtherKey:="IdDocu", IsForeignKey:=true)>  _
	Public Property Documento() As Documento
		Get
			Return Me._Documento.Entity
		End Get
		Set
			Dim previousValue As Documento = Me._Documento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documento.Entity = Nothing
					previousValue.Egreso.Remove(Me)
				End If
				Me._Documento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Egreso.Add(Me)
					Me._IdDocu = value.IdDocu
				Else
					Me._IdDocu = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Documento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Otro(ByVal entity As Otro)
		Me.SendPropertyChanging
		entity.Egreso = Me
	End Sub
	
	Private Sub detach_Otro(ByVal entity As Otro)
		Me.SendPropertyChanging
		entity.Egreso = Nothing
	End Sub
	
	Private Sub attach_Trabajador(ByVal entity As Trabajador)
		Me.SendPropertyChanging
		entity.Egreso = Me
	End Sub
	
	Private Sub detach_Trabajador(ByVal entity As Trabajador)
		Me.SendPropertyChanging
		entity.Egreso = Nothing
	End Sub
	
	Private Sub attach_Vehiculo(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Egreso = Me
	End Sub
	
	Private Sub detach_Vehiculo(ByVal entity As Vehiculo)
		Me.SendPropertyChanging
		entity.Egreso = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ingreso")>  _
Partial Public Class Ingreso
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdIng As Integer
	
	Private _IdCliente As System.Nullable(Of Integer)
	
	Private _Motivo As String
	
	Private _Fecha As System.Nullable(Of Date)
	
	Private _MontoIng As System.Nullable(Of Integer)
	
	Private _IdDocu As System.Nullable(Of Integer)
	
	Private _Cliente As EntityRef(Of Cliente)
	
	Private _Documento As EntityRef(Of Documento)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdIngChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIngChanged()
    End Sub
    Partial Private Sub OnIdClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdClienteChanged()
    End Sub
    Partial Private Sub OnMotivoChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnMontoIngChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMontoIngChanged()
    End Sub
    Partial Private Sub OnIdDocuChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDocuChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		Me._Documento = CType(Nothing, EntityRef(Of Documento))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIng", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdIng() As Integer
		Get
			Return Me._IdIng
		End Get
		Set
			If ((Me._IdIng = value)  _
						= false) Then
				Me.OnIdIngChanging(value)
				Me.SendPropertyChanging
				Me._IdIng = value
				Me.SendPropertyChanged("IdIng")
				Me.OnIdIngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCliente", DbType:="Int")>  _
	Public Property IdCliente() As System.Nullable(Of Integer)
		Get
			Return Me._IdCliente
		End Get
		Set
			If (Me._IdCliente.Equals(value) = false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdClienteChanging(value)
				Me.SendPropertyChanging
				Me._IdCliente = value
				Me.SendPropertyChanged("IdCliente")
				Me.OnIdClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Motivo", DbType:="VarChar(100)")>  _
	Public Property Motivo() As String
		Get
			Return Me._Motivo
		End Get
		Set
			If (String.Equals(Me._Motivo, value) = false) Then
				Me.OnMotivoChanging(value)
				Me.SendPropertyChanging
				Me._Motivo = value
				Me.SendPropertyChanged("Motivo")
				Me.OnMotivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date")>  _
	Public Property Fecha() As System.Nullable(Of Date)
		Get
			Return Me._Fecha
		End Get
		Set
			If (Me._Fecha.Equals(value) = false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MontoIng", DbType:="Int")>  _
	Public Property MontoIng() As System.Nullable(Of Integer)
		Get
			Return Me._MontoIng
		End Get
		Set
			If (Me._MontoIng.Equals(value) = false) Then
				Me.OnMontoIngChanging(value)
				Me.SendPropertyChanging
				Me._MontoIng = value
				Me.SendPropertyChanged("MontoIng")
				Me.OnMontoIngChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDocu", DbType:="Int")>  _
	Public Property IdDocu() As System.Nullable(Of Integer)
		Get
			Return Me._IdDocu
		End Get
		Set
			If (Me._IdDocu.Equals(value) = false) Then
				If Me._Documento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDocuChanging(value)
				Me.SendPropertyChanging
				Me._IdDocu = value
				Me.SendPropertyChanged("IdDocu")
				Me.OnIdDocuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Ingreso", Storage:="_Cliente", ThisKey:="IdCliente", OtherKey:="IdCliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Ingreso.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ingreso.Add(Me)
					Me._IdCliente = value.IdCliente
				Else
					Me._IdCliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Documento_Ingreso", Storage:="_Documento", ThisKey:="IdDocu", OtherKey:="IdDocu", IsForeignKey:=true)>  _
	Public Property Documento() As Documento
		Get
			Return Me._Documento.Entity
		End Get
		Set
			Dim previousValue As Documento = Me._Documento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Documento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Documento.Entity = Nothing
					previousValue.Ingreso.Remove(Me)
				End If
				Me._Documento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ingreso.Add(Me)
					Me._IdDocu = value.IdDocu
				Else
					Me._IdDocu = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Documento")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Otro")>  _
Partial Public Class Otro
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdOtro As Integer
	
	Private _Motivo As String
	
	Private _IdEgre As System.Nullable(Of Integer)
	
	Private _Egreso As EntityRef(Of Egreso)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdOtroChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOtroChanged()
    End Sub
    Partial Private Sub OnMotivoChanging(value As String)
    End Sub
    Partial Private Sub OnMotivoChanged()
    End Sub
    Partial Private Sub OnIdEgreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEgreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Egreso = CType(Nothing, EntityRef(Of Egreso))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOtro", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdOtro() As Integer
		Get
			Return Me._IdOtro
		End Get
		Set
			If ((Me._IdOtro = value)  _
						= false) Then
				Me.OnIdOtroChanging(value)
				Me.SendPropertyChanging
				Me._IdOtro = value
				Me.SendPropertyChanged("IdOtro")
				Me.OnIdOtroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Motivo", DbType:="VarChar(100)")>  _
	Public Property Motivo() As String
		Get
			Return Me._Motivo
		End Get
		Set
			If (String.Equals(Me._Motivo, value) = false) Then
				Me.OnMotivoChanging(value)
				Me.SendPropertyChanging
				Me._Motivo = value
				Me.SendPropertyChanged("Motivo")
				Me.OnMotivoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEgre", DbType:="Int")>  _
	Public Property IdEgre() As System.Nullable(Of Integer)
		Get
			Return Me._IdEgre
		End Get
		Set
			If (Me._IdEgre.Equals(value) = false) Then
				If Me._Egreso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEgreChanging(value)
				Me.SendPropertyChanging
				Me._IdEgre = value
				Me.SendPropertyChanged("IdEgre")
				Me.OnIdEgreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Egreso_Otro", Storage:="_Egreso", ThisKey:="IdEgre", OtherKey:="IdEgre", IsForeignKey:=true)>  _
	Public Property Egreso() As Egreso
		Get
			Return Me._Egreso.Entity
		End Get
		Set
			Dim previousValue As Egreso = Me._Egreso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Egreso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Egreso.Entity = Nothing
					previousValue.Otro.Remove(Me)
				End If
				Me._Egreso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Otro.Add(Me)
					Me._IdEgre = value.IdEgre
				Else
					Me._IdEgre = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Egreso")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Trabajador")>  _
Partial Public Class Trabajador
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTrab As Integer
	
	Private _Nombre As String
	
	Private _DNI As String
	
	Private _NroCuenta As String
	
	Private _Cargo As String
	
	Private _IdEgre As System.Nullable(Of Integer)
	
	Private _Egreso As EntityRef(Of Egreso)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTrabChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTrabChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnDNIChanging(value As String)
    End Sub
    Partial Private Sub OnDNIChanged()
    End Sub
    Partial Private Sub OnNroCuentaChanging(value As String)
    End Sub
    Partial Private Sub OnNroCuentaChanged()
    End Sub
    Partial Private Sub OnCargoChanging(value As String)
    End Sub
    Partial Private Sub OnCargoChanged()
    End Sub
    Partial Private Sub OnIdEgreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEgreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Egreso = CType(Nothing, EntityRef(Of Egreso))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTrab", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTrab() As Integer
		Get
			Return Me._IdTrab
		End Get
		Set
			If ((Me._IdTrab = value)  _
						= false) Then
				Me.OnIdTrabChanging(value)
				Me.SendPropertyChanging
				Me._IdTrab = value
				Me.SendPropertyChanged("IdTrab")
				Me.OnIdTrabChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(100)")>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNI", DbType:="VarChar(100)")>  _
	Public Property DNI() As String
		Get
			Return Me._DNI
		End Get
		Set
			If (String.Equals(Me._DNI, value) = false) Then
				Me.OnDNIChanging(value)
				Me.SendPropertyChanging
				Me._DNI = value
				Me.SendPropertyChanged("DNI")
				Me.OnDNIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NroCuenta", DbType:="VarChar(100)")>  _
	Public Property NroCuenta() As String
		Get
			Return Me._NroCuenta
		End Get
		Set
			If (String.Equals(Me._NroCuenta, value) = false) Then
				Me.OnNroCuentaChanging(value)
				Me.SendPropertyChanging
				Me._NroCuenta = value
				Me.SendPropertyChanged("NroCuenta")
				Me.OnNroCuentaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cargo", DbType:="VarChar(100)")>  _
	Public Property Cargo() As String
		Get
			Return Me._Cargo
		End Get
		Set
			If (String.Equals(Me._Cargo, value) = false) Then
				Me.OnCargoChanging(value)
				Me.SendPropertyChanging
				Me._Cargo = value
				Me.SendPropertyChanged("Cargo")
				Me.OnCargoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEgre", DbType:="Int")>  _
	Public Property IdEgre() As System.Nullable(Of Integer)
		Get
			Return Me._IdEgre
		End Get
		Set
			If (Me._IdEgre.Equals(value) = false) Then
				If Me._Egreso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEgreChanging(value)
				Me.SendPropertyChanging
				Me._IdEgre = value
				Me.SendPropertyChanged("IdEgre")
				Me.OnIdEgreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Egreso_Trabajador", Storage:="_Egreso", ThisKey:="IdEgre", OtherKey:="IdEgre", IsForeignKey:=true)>  _
	Public Property Egreso() As Egreso
		Get
			Return Me._Egreso.Entity
		End Get
		Set
			Dim previousValue As Egreso = Me._Egreso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Egreso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Egreso.Entity = Nothing
					previousValue.Trabajador.Remove(Me)
				End If
				Me._Egreso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Trabajador.Add(Me)
					Me._IdEgre = value.IdEgre
				Else
					Me._IdEgre = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Egreso")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUser As Integer
	
	Private _logeo As String
	
	Private _contraseña As String
	
	Private _NomCompleto As String
	
	Private _IdCliente As System.Nullable(Of Integer)
	
	Private _Cliente As EntityRef(Of Cliente)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnlogeoChanging(value As String)
    End Sub
    Partial Private Sub OnlogeoChanged()
    End Sub
    Partial Private Sub OncontraseñaChanging(value As String)
    End Sub
    Partial Private Sub OncontraseñaChanged()
    End Sub
    Partial Private Sub OnNomCompletoChanging(value As String)
    End Sub
    Partial Private Sub OnNomCompletoChanged()
    End Sub
    Partial Private Sub OnIdClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdClienteChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cliente = CType(Nothing, EntityRef(Of Cliente))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUser", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logeo", DbType:="VarChar(100)")>  _
	Public Property logeo() As String
		Get
			Return Me._logeo
		End Get
		Set
			If (String.Equals(Me._logeo, value) = false) Then
				Me.OnlogeoChanging(value)
				Me.SendPropertyChanging
				Me._logeo = value
				Me.SendPropertyChanged("logeo")
				Me.OnlogeoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contraseña", DbType:="VarChar(100)")>  _
	Public Property contraseña() As String
		Get
			Return Me._contraseña
		End Get
		Set
			If (String.Equals(Me._contraseña, value) = false) Then
				Me.OncontraseñaChanging(value)
				Me.SendPropertyChanging
				Me._contraseña = value
				Me.SendPropertyChanged("contraseña")
				Me.OncontraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomCompleto", DbType:="VarChar(100)")>  _
	Public Property NomCompleto() As String
		Get
			Return Me._NomCompleto
		End Get
		Set
			If (String.Equals(Me._NomCompleto, value) = false) Then
				Me.OnNomCompletoChanging(value)
				Me.SendPropertyChanging
				Me._NomCompleto = value
				Me.SendPropertyChanged("NomCompleto")
				Me.OnNomCompletoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCliente", DbType:="Int")>  _
	Public Property IdCliente() As System.Nullable(Of Integer)
		Get
			Return Me._IdCliente
		End Get
		Set
			If (Me._IdCliente.Equals(value) = false) Then
				If Me._Cliente.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdClienteChanging(value)
				Me.SendPropertyChanging
				Me._IdCliente = value
				Me.SendPropertyChanged("IdCliente")
				Me.OnIdClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Cliente_Usuario", Storage:="_Cliente", ThisKey:="IdCliente", OtherKey:="IdCliente", IsForeignKey:=true)>  _
	Public Property Cliente() As Cliente
		Get
			Return Me._Cliente.Entity
		End Get
		Set
			Dim previousValue As Cliente = Me._Cliente.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Cliente.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Cliente.Entity = Nothing
					previousValue.Usuario.Remove(Me)
				End If
				Me._Cliente.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuario.Add(Me)
					Me._IdCliente = value.IdCliente
				Else
					Me._IdCliente = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Cliente")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Vehiculo")>  _
Partial Public Class Vehiculo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdVehic As Integer
	
	Private _Estado As String
	
	Private _Modelo As String
	
	Private _Placa As String
	
	Private _Soat As String
	
	Private _IdEgre As System.Nullable(Of Integer)
	
	Private _Egreso As EntityRef(Of Egreso)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdVehicChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdVehicChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnModeloChanging(value As String)
    End Sub
    Partial Private Sub OnModeloChanged()
    End Sub
    Partial Private Sub OnPlacaChanging(value As String)
    End Sub
    Partial Private Sub OnPlacaChanged()
    End Sub
    Partial Private Sub OnSoatChanging(value As String)
    End Sub
    Partial Private Sub OnSoatChanged()
    End Sub
    Partial Private Sub OnIdEgreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEgreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Egreso = CType(Nothing, EntityRef(Of Egreso))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdVehic", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdVehic() As Integer
		Get
			Return Me._IdVehic
		End Get
		Set
			If ((Me._IdVehic = value)  _
						= false) Then
				Me.OnIdVehicChanging(value)
				Me.SendPropertyChanging
				Me._IdVehic = value
				Me.SendPropertyChanged("IdVehic")
				Me.OnIdVehicChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="VarChar(100)")>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Modelo", DbType:="VarChar(100)")>  _
	Public Property Modelo() As String
		Get
			Return Me._Modelo
		End Get
		Set
			If (String.Equals(Me._Modelo, value) = false) Then
				Me.OnModeloChanging(value)
				Me.SendPropertyChanging
				Me._Modelo = value
				Me.SendPropertyChanged("Modelo")
				Me.OnModeloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Placa", DbType:="VarChar(100)")>  _
	Public Property Placa() As String
		Get
			Return Me._Placa
		End Get
		Set
			If (String.Equals(Me._Placa, value) = false) Then
				Me.OnPlacaChanging(value)
				Me.SendPropertyChanging
				Me._Placa = value
				Me.SendPropertyChanged("Placa")
				Me.OnPlacaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Soat", DbType:="VarChar(100)")>  _
	Public Property Soat() As String
		Get
			Return Me._Soat
		End Get
		Set
			If (String.Equals(Me._Soat, value) = false) Then
				Me.OnSoatChanging(value)
				Me.SendPropertyChanging
				Me._Soat = value
				Me.SendPropertyChanged("Soat")
				Me.OnSoatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEgre", DbType:="Int")>  _
	Public Property IdEgre() As System.Nullable(Of Integer)
		Get
			Return Me._IdEgre
		End Get
		Set
			If (Me._IdEgre.Equals(value) = false) Then
				If Me._Egreso.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEgreChanging(value)
				Me.SendPropertyChanging
				Me._IdEgre = value
				Me.SendPropertyChanged("IdEgre")
				Me.OnIdEgreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Egreso_Vehiculo", Storage:="_Egreso", ThisKey:="IdEgre", OtherKey:="IdEgre", IsForeignKey:=true)>  _
	Public Property Egreso() As Egreso
		Get
			Return Me._Egreso.Entity
		End Get
		Set
			Dim previousValue As Egreso = Me._Egreso.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Egreso.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Egreso.Entity = Nothing
					previousValue.Vehiculo.Remove(Me)
				End If
				Me._Egreso.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Vehiculo.Add(Me)
					Me._IdEgre = value.IdEgre
				Else
					Me._IdEgre = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Egreso")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
